% unpack constants
addpath(genpath('/home/stone/eshed/beta_bricks/analyses'));
constants = Constants;

sessions = constants.sessions;
FSIDs = constants.FSIDs;
fmridata_dir = constants.fmridata_dir;
partitions = constants.partitions;
output_dir = constants.output_dir;
glm_dir = constants.glm_dir;

% override depth sets to start at deepest
depth_sets = {[5,6],[3,4],[1,2]};


% dataset x depth set x partition
mean_vals = zeros(length(sessions), numel(depth_sets), 2);
base = sprintf('%s/r_squared_matched_indices', output_dir);

for session_idx = 1:length(sessions)
	session = sessions{session_idx};
	FSID = FSIDs{session_idx};
	if strcmp(session, '20161006-CVNS001_floc3t')
		continue;
	end
	fprintf('Session: %s...\n', session);

	outpath = sprintf('%s/%s.mat', base, session);
	index_struct = struct();

	% loop over depths
	for depth_set_idx = 1:numel(depth_sets)
		depths = depth_sets{depth_set_idx};
		fprintf('\tDepth Set: %d...\n', depth_set_idx);

		lateral_r2_odd = get_r2(...
			session,...
			FSID,...
			fmridata_dir,...
			depths,...
			'VTC_lateral',...
			glm_dir,...
			'odd'...
		);

		lateral_r2_even = get_r2(...
			session,...
			FSID,...
			fmridata_dir,...
			depths,...
			'VTC_lateral',...
			glm_dir,...
			'even'...
		);

		medial_r2_odd = get_r2(...
			session,...
			FSID,...
			fmridata_dir,...
			depths,...
			'VTC_medial',...
			glm_dir,...
			'odd'...
		);

		medial_r2_even = get_r2(...
			session,...
			FSID,...
			fmridata_dir,...
			depths,...
			'VTC_medial',...
			glm_dir,...
			'even'...
		);

		% average odd and even
		lateral_r2 = mean([lateral_r2_odd, lateral_r2_even], 2);
		medial_r2 = mean([medial_r2_odd, medial_r2_even], 2);

		% sort both from highest r2 to lowest
		[sorted_lateral, lateral_sort_ind] = sort(lateral_r2, 'descend');
		[sorted_medial, medial_sort_ind] = sort(medial_r2, 'descend');

		n_lateral = length(sorted_lateral);
		n_medial = length(sorted_medial);

		n_keep = ceil(0.7 * min(n_lateral, n_medial));

		if depth_set_idx == 1
			[matched_lateral_indices, matched_medial_indices] = get_matching_indices(...
				sorted_lateral,...
				sorted_medial,...
				n_keep...
			);
			index_struct.lateral = lateral_sort_ind(matched_lateral_indices);
			index_struct.medial = medial_sort_ind(matched_medial_indices);
		end

		fprintf('Layers %d and %d\n-----------\n', depths(1), depths(2));
		fprintf('Lateral mean: %.4f\n', mean(sorted_lateral(matched_lateral_indices)));
		fprintf('Medial mean: %.4f\n', mean(sorted_medial(matched_medial_indices)));

		mean_vals(session_idx, depth_set_idx, 1) = mean(sorted_lateral(matched_lateral_indices));
		mean_vals(session_idx, depth_set_idx, 2) = mean(sorted_medial(matched_medial_indices));


		save(outpath, 'index_struct');
	end
end


mean_val_outpath = sprintf('%s/mean_vals.mat', base);
save(mean_val_outpath, 'mean_vals');

