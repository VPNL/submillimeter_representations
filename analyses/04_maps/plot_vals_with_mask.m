function [rgbimg, L] = plot_vals_with_mask(session, FSID, partition_data, cmap, clim, view_number, partition, thresh, mask_base)

	% Set the colormap
	cmap = eval([cmap, '(', num2str(100), ')']);

	hemis = {'lh', 'rh'};
	surfsuffix = 'DENSETRUNCpt';

	% load views, specify correct params
	views = get_views();
	view = views{view_number};
	area = view{1};
	surftype = view{2};
	hemiflip = view{3};
	imageres = view{4};
	fsaverage0 = view{5};
	xyextent = view{6};

	% get number of vertices in inflated DENSETRUNCpt
	[numlh, numrh] = cvnreadsurface(...
		FSID, ...
		hemis, ...
		'sphere', ...
		surfsuffix, ...
		'justcount', ...
		true ...
	);

	% get viewpoint
	if hemiflip 
		hemis = fliplr(hemis);
	end
	
	viewpt = cvnlookupviewpoint(FSID, hemis, area, surftype);

	% get partition mask
	[lh_mask, ~, ~] = cvnroimask(FSID, 'lh', partition, [], 'DENSETRUNCpt');
	[rh_mask, ~, ~] = cvnroimask(FSID, 'rh', partition, [], 'DENSETRUNCpt');
	mask = [lh_mask{1}; rh_mask{1}];

	% initialize the data vector and populate with partition data vector
	data = zeros(size(mask));
	data(mask) = partition_data;

	dataStruct = struct('data', data, 'numlh', numlh, 'numrh', numrh);

	if ~strcmp(mask_base, '')
	    bias_mask = get_mask(session, FSID, mask_base, thresh);
	    mask = mask & bias_mask;
	end

	% draw image and create RGB
	[img, L, rgbimg] = cvnlookupimages(...
		FSID, ...
		dataStruct, ...
		hemis, ...
		viewpt, ...
		[], ...
		'xyextent', xyextent, ...
		'surftype', surftype, ...
		'imageres', imageres, ...
		'cmap', cmap, ...
		'clim', clim, ...
		'background', 'curv', ...
		'surfsuffix', surfsuffix, ...
		'overlayalpha', mask, ...
		'roiname', {'VTC_lateral', 'VTC_medial'}, ...
		'roiwidth', 3, ...
		'roicolor', 'w' ...
	);

end %end fx

% from cvnvisualizeanatomicalresults.m
function allviews = get_views()
	allviews = { ...
	  {'ventral'        'inflated'                 1 2000    0         [1 1]} ...
	  {'ventral'        'sphere'                   0 1000    0         [1 1]} ...
	  {'occip'          'sphere'                   0 1000    0         [1 1]} ...
	  {'occip'          'inflated'                 0  500    0         [1 1]} ...
	  {'parietal'       'inflated'                 0  500    0         [1 1]} ...
	  {'medial'         'inflated'                 0  500    0         [1 1]} ...
	  {'lateral'        'inflated'                 0  500    0         [1 1]} ...
	  {'medial-ventral' 'inflated'                 0  500    0         [1 1]} ...
	  {'ventral'        'gVTC.flat.patch.3d'       1 2000    0         [160 0]} ...   % 12.5 pixels per mm
	  {''               'gEVC.flat.patch.3d'       0 1500    0         [120 0]} ...   % 12.5 pixels per mm
	};
end

function mask = get_mask(session, FSID, mask_base, thresh)

	preproc_base = sprintf('/home/stone-ext1/fmridata/%s/%s%s',...
	    session,...
	    mask_base,...
	    FSID);

	bias_struct = matfile(sprintf('%s/meanbiascorrected04.mat',preproc_base));
	bias_data = permute(bias_struct.data,[3 1 2]);

	n_vertices = size(bias_data, 1);
	mask = ones(n_vertices, 1);

	mean_bias_corrected = cell(1,6);

	for layer = 1:6
	    mb = bias_data(:,1,layer);
	    mean_bias_corrected{layer} = mb; 
	    mask = mask .* (mb > thresh);
	end
end
